package com.example.whoru.subjectmanager.app;

import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.PropertyValuesHolder;
import android.animation.ValueAnimator;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;


import com.example.whoru.subjectmanager.R;
import com.example.whoru.subjectmanager.database.SQLiteHelper;

public class MainActivity extends Activity implements View.OnClickListener {
    private SharedPreferences pref;
    private SharedPreferences.Editor editor;
    private CheckBox mRpsw;
    private SQLiteHelper dbHelper;


    private TextView mBtnLogin;

    private TextView  mBtnRegister;

    private View progress;

    private View mInputLayout;

    private float mWidth, mHeight;

    private LinearLayout mName, mPsw;


    private EditText mAccount;
    private EditText mPassword;
    String REMEMBER_PWD_PREF = "rememberPwd";
    String ACCOUNT_PREF = "account";
    String PASSWORD_PREF = "password";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView( R.layout.activity_main);
        initView();
        pref=PreferenceManager.getDefaultSharedPreferences(this);
        boolean isRemember = pref.getBoolean(REMEMBER_PWD_PREF, false);
        if(isRemember){
            String account = pref.getString(ACCOUNT_PREF, "");
            String password = pref.getString(PASSWORD_PREF, "");
            mAccount.setText(account);
            mPassword.setText(password);
            //mAccount.setText(pref.getString(ACCOUNT_PREF, ""));
            //mPassword.setText(pref.getString(PASSWORD_PREF, ""));
            mRpsw.setChecked(true);
        }

    }

    private void initView() {
        mBtnLogin = (TextView) findViewById(R.id.main_btn_login);
        mBtnRegister =(TextView)findViewById(R.id.main_btn_register);
        progress = findViewById(R.id.layout_progress);
        mInputLayout = findViewById(R.id.input_layout);
        mName = (LinearLayout) findViewById(R.id.input_layout_name);
        mPsw = (LinearLayout) findViewById(R.id.input_layout_psw);
        mRpsw =(CheckBox)findViewById(R.id.remember_pwd) ;
        mAccount=(EditText)findViewById(R.id.input_account);
        mPassword=(EditText)findViewById(R.id.input_password);

        mBtnLogin.setOnClickListener(this);
        mBtnRegister.setOnClickListener(this);
        dbHelper=new SQLiteHelper(this,"User_info.db",null,1);
       // pref=PreferenceManager.getDefaultSharedPreferences(this);
    }

    @Override
    public void onClick(View v) {

        int id = v.getId();
        switch (id) {
            case R.id.main_btn_login:
                String Account = mAccount.getText().toString();
                String Password = mPassword.getText().toString();
                if(login(Account,Password)){
                    editor=pref.edit();
                    if (mRpsw.isChecked()){
                        editor.putBoolean("REMEMBER_PWD_PREF",true);
                        editor.putString("ACCOUNT_PREF",Account);
                        editor.putString("PASSWORD_PREF",Password);
                    }else{
                        editor.clear();
                    }
                    editor.commit();
                    // 计算出控件的高与宽
                    mWidth = mBtnLogin.getMeasuredWidth();
                    mHeight = mBtnLogin.getMeasuredHeight();
                    // 隐藏输入框
                    mName.setVisibility(View.INVISIBLE);
                    mPsw.setVisibility(View.INVISIBLE);
                    mRpsw.setVisibility(View.INVISIBLE);

                    inputAnimator(mInputLayout, mWidth, mHeight);

                }else{
                    Toast.makeText(MainActivity.this,"账号或密码错误",Toast.LENGTH_SHORT).show();
                }
                break;
            case R.id.main_btn_register:
                Intent intent=new Intent(MainActivity.this,RegistActivity.class);

                startActivity(intent);
                break;
            default:
                break;
        }




    }
    public Boolean login(String Account,String Password){
        SQLiteDatabase db=dbHelper.getWritableDatabase();
        String sql="select * from User_data where account=? and password=?";
        Cursor cursor =db.rawQuery(sql,new String[]{mAccount.getText().toString(),mPassword.getText().toString()});
        if(cursor.moveToFirst()){
            cursor.close();
            return true;
        }
        else  return  false;
    }


    /**
     * 输入框的动画效果
     *
     * @param view
     *            控件
     * @param w
     *            宽
     * @param h
     *            高
     */
    private void inputAnimator(final View view, float w, float h) {

        AnimatorSet set = new AnimatorSet();

        ValueAnimator animator = ValueAnimator.ofFloat(0, w);
        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                float value = (Float) animation.getAnimatedValue();
                ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) view
                        .getLayoutParams();
                params.leftMargin = (int) value;
                params.rightMargin = (int) value;
                view.setLayoutParams(params);
            }
        });

        ObjectAnimator animator2 = ObjectAnimator.ofFloat(mInputLayout,
                "scaleX", 1f, 0.5f);
        set.setDuration(1000);
        set.setInterpolator(new AccelerateDecelerateInterpolator());
        set.playTogether(animator, animator2);
        set.start();
        set.addListener(new Animator.AnimatorListener() {

            @Override
            public void onAnimationStart(Animator animation) {

            }

            @Override
            public void onAnimationRepeat(Animator animation) {

            }

            @Override
            public void onAnimationEnd(Animator animation) {
                /**
                 * 动画结束后，先显示加载的动画，然后再隐藏输入框
                 */
                progress.setVisibility(View.VISIBLE);
                progressAnimator(progress);
                mInputLayout.setVisibility(View.INVISIBLE);



            }

            @Override
            public void onAnimationCancel(Animator animation) {


            }
        });

    }

    /**
     * 出现进度动画
     *
     * @param view
     */
    private void progressAnimator(final View view) {

        PropertyValuesHolder animator = PropertyValuesHolder.ofFloat("scaleX",
                0.5f, 1f);
        PropertyValuesHolder animator2 = PropertyValuesHolder.ofFloat("scaleY",
                0.5f, 1f);
        ObjectAnimator animator3 = ObjectAnimator.ofPropertyValuesHolder(view,
                animator, animator2);
        animator3.setDuration(1000);
        animator3.setInterpolator(new JellyInterpolator());
        animator3.start();
        animator3.addListener(new Animator.AnimatorListener() {

            @Override
            public void onAnimationStart(Animator animation) {

            }

            @Override
            public void onAnimationRepeat(Animator animation) {

            }

            @Override
            public void onAnimationEnd(Animator animation) {
                /**
                 * 动画结束后，跳转
                 */
                Intent intent=new Intent(MainActivity.this,HOMEActivity.class);

                startActivity(intent);
                recovery();

            }

            @Override
            public void onAnimationCancel(Animator animation) {


            }
        });

    }
    /**
     * 恢复初始状态
     */
    private void recovery() {
        progress.setVisibility(View.GONE);
        mInputLayout.setVisibility(View.VISIBLE);
        mName.setVisibility(View.VISIBLE);
        mPsw.setVisibility(View.VISIBLE);
        mRpsw.setVisibility(View.VISIBLE);

        ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) mInputLayout.getLayoutParams();
        params.leftMargin = 0;
        params.rightMargin = 0;
        mInputLayout.setLayoutParams(params);


        ObjectAnimator animator2 = ObjectAnimator.ofFloat(mInputLayout, "scaleX", 0.5f,1f );
        animator2.setDuration(500);
        animator2.setInterpolator(new AccelerateDecelerateInterpolator());
        animator2.start();
    }




}
